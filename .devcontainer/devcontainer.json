{
    "name": "pytest docker compose v2 Development",
    "build": {
      "dockerfile": "Dockerfile",
      "context": "${localWorkspaceFolder}"
    },
    // needed because of the interaction between the devcontainer
    // the test docker compose project, and the hostname reported by
    // docker inspect in the tests in the PortConfig.
    // the hostname is 0.0.0.0 and cannot be reached by the test code
    // unless the devcontainer is on the host network. I've tried, among
    // many othe permutations, putting the devcontainer on the same
    // externally created network as the test containers but that did
    // not work
    "runArgs": [
      "--network=host"
    ],
    "workspaceFolder": "/workspace",
    "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind",
    "mounts": [
        {
            "source": "/var/run/docker.sock",
            "target": "/var/run/docker.sock",
            "type": "bind"
        }
    ],
    // Set *default* container specific settings.json values on container create.
    "customizations": {
      "vscode": {
        "extensions": [
          "ms-python.python",
          "charliermarsh.ruff",
          "ms-azuretools.vscode-docker",
          "eamodio.gitlens",
          "Gruntfuggly.todo-tree",
          "be5invis.toml"
        ],
        "settings": {
          "#terminal.integrated.defaultProfile.linux#": "/bin/bash",
          "python.defaultInterpreterPath": "/venv/bin/python",
          "python.terminal.activateEnvironment": true,
          "python.testing.unittestEnabled": false,
          "python.testing.nosetestsEnabled": false,
          "python.testing.pytestEnabled": true,
          "ruff.organizeImports": true,
          "[python]": {
            "editor.codeActionsOnSave": {
              "source.organizeImports": "always"
            },
            "editor.defaultFormatter": "charliermarsh.ruff",
            "editor.formatOnSave": true
          },
          "[dockerfile]": {
            "editor.formatOnSave": false
          },
          "dev.containers.dockerCredentialHelper": false
        }
      }
    },
    "features": {
      "ghcr.io/devcontainers/features/docker-outside-of-docker:1": {},
      "ghcr.io/devcontainers/features/github-cli:1": {}
    },
    "remoteEnv": {
      // Pass in the host directory for Docker mount commands from inside the container
      "HOST_PROJECT_PATH": "${localWorkspaceFolder}",
      "VIRTUAL_ENV": "/venv",
      "PATH": "${containerEnv:PATH}:/venv/bin",
      "EDITOR": "code --wait",
      "VISUAL": "code --wait",
      "GIT_EDITOR": "code --wait"
    },
    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    // Left empty because this is handled by docker compose for individual services,
    // use this only for additional ports not needed by those services (e.g. ssh)
    "forwardPorts": []
}
